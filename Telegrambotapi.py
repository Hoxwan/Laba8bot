import os
import asyncio
import random
import config
import requests
import json
from datetime import datetime
from typing import Dict, List, Optional

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InputMediaPhoto
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    CallbackQueryHandler
)


class TelegramBot:
    def __init__(self):
        self.application = Application.builder().token(config.TOKEN).build()
        self._register_handlers()
        self.user_states: Dict[int, Dict] = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.translation_directions: Dict[int, str] = {}  # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        handlers = [
            CommandHandler("start", self._start),
            CommandHandler("time", self._handle_time),
            CommandHandler("date", self._handle_date),
            CommandHandler("dice", self._handle_dice),
            CommandHandler("geocode", self._handle_geocode),
            CommandHandler("quiz", self._start_quiz),
            CommandHandler("translate", self._handle_translate),
            MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_text),
            CallbackQueryHandler(self._handle_callback)
        ]
        for handler in handlers:
            self.application.add_handler(handler)

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    async def _start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        keyboard = [
            ['‚è± –í—Ä–µ–º—è', 'üìÖ –î–∞—Ç–∞'],
            ['üé≤ –ö—É–±–∏–∫', 'üó∫ –ì–µ–æ–∫–æ–¥–µ—Ä'],
            ['‚ùì –í–∏–∫—Ç–æ—Ä–∏–Ω–∞', 'üåç –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫']
        ]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )

    async def _handle_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        await update.message.reply_text(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}")

    async def _handle_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        await update.message.reply_text(f"–°–µ–≥–æ–¥–Ω—è: {datetime.now().strftime('%Y-%m-%d')}")

    # –ò–≥—Ä–∞–ª—å–Ω—ã–µ –∫–æ—Å—Ç–∏ (–ó–∞–¥–∞–Ω–∏–µ ‚Ññ7)
    async def _handle_dice(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        keyboard = [
            [InlineKeyboardButton("1d6", callback_data="dice_1d6"),
             InlineKeyboardButton("2d6", callback_data="dice_2d6")],
            [InlineKeyboardButton("1d20", callback_data="dice_1d20")]
        ]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–±–∏–∫:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    # –ì–µ–æ–∫–æ–¥–µ—Ä —Å Yandex API (–ó–∞–¥–∞–Ω–∏–µ ‚Ññ10)
    async def _handle_geocode(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        if not context.args:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /geocode <–º–µ—Å—Ç–æ>")
            return

        query = " ".join(context.args)
        try:
            # –ó–∞–ø—Ä–æ—Å –∫ Yandex Geocoder API
            geocoder_url = f"https://geocode-maps.yandex.ru/1.x/?apikey={config.YANDEX_GEOCODER_API}&geocode={query}&format=json"
            response = requests.get(geocoder_url).json()

            feature = response['response']['GeoObjectCollection']['featureMember'][0]['GeoObject']
            pos = feature['Point']['pos']
            lon, lat = pos.split()
            address = feature['metaDataProperty']['GeocoderMetaData']['text']

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É
            map_url = f"https://static-maps.yandex.ru/1.x/?ll={lon},{lat}&spn=0.05,0.05&l=map&pt={lon},{lat},pm2rdm"

            await update.message.reply_photo(
                photo=map_url,
                caption=f"üìç {address}\n\n–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat}, {lon}"
            )
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")

    # –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ (–ó–∞–¥–∞–Ω–∏–µ ‚Ññ9)
    async def _start_quiz(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        questions = [
            {"question": "–°—Ç–æ–ª–∏—Ü–∞ –†–æ—Å—Å–∏–∏?", "answer": "–ú–æ—Å–∫–≤–∞"},
            {"question": "2+2?", "answer": "4"}
        ]
        random.shuffle(questions)

        self.user_states[update.effective_user.id] = {
            'questions': questions[:5],
            'current': 0,
            'score': 0
        }

        await self._ask_question(update)

    async def _ask_question(self, update: Update) -> None:
        user_id = update.effective_user.id
        state = self.user_states[user_id]

        if state['current'] < len(state['questions']):
            question = state['questions'][state['current']]['question']
            await update.message.reply_text(f"–í–æ–ø—Ä–æ—Å {state['current'] + 1}: {question}")
        else:
            await update.message.reply_text(
                f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {state['score']}/{len(state['questions'])}"
            )
            del self.user_states[user_id]

    # –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å Yandex API (–ó–∞–¥–∞–Ω–∏–µ ‚Ññ11)
    async def _handle_translate(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–≤–æ–¥–∞"""
        keyboard = [
            [InlineKeyboardButton("üá∑üá∫ ‚Üí üá¨üáß –†—É—Å—Å–∫–∏–π-–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", callback_data="translate_ru-en")],
            [InlineKeyboardButton("üá¨üáß ‚Üí üá∑üá∫ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π-–†—É—Å—Å–∫–∏–π", callback_data="translate_en-ru")],
        ]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def _translate_text(self, text: str, direction: str) -> str:
        """–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Yandex Translate API"""
        try:
            url = "https://translate.api.cloud.yandex.net/translate/v2/translate"
            headers = {
                "Authorization": f"Api-Key {config.YANDEX_TRANSLATE_API}",
                "Content-Type": "application/json"
            }
            data = {
                "texts": [text],
                "targetLanguageCode": direction.split('-')[1]
            }

            response = requests.post(url, headers=headers, json=data)
            result = response.json()
            return result['translations'][0]['text']
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}"

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–ª–±—ç–∫–æ–≤
    async def _handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        user_id = update.effective_user.id
        text = update.message.text

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
        if user_id in self.user_states:
            state = self.user_states[user_id]
            correct_answer = state['questions'][state['current']]['answer']

            if text.lower() == correct_answer.lower():
                state['score'] += 1
                await update.message.reply_text("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
            else:
                await update.message.reply_text(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")

            state['current'] += 1
            await self._ask_question(update)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        elif user_id in self.translation_directions:
            direction = self.translation_directions[user_id]
            translated = await self._translate_text(text, direction)
            await update.message.reply_text(f"–ü–µ—Ä–µ–≤–æ–¥:\n{translated}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
        else:
            if text == '‚è± –í—Ä–µ–º—è':
                await self._handle_time(update, context)
            elif text == 'üìÖ –î–∞—Ç–∞':
                await self._handle_date(update, context)
            elif text == 'üé≤ –ö—É–±–∏–∫':
                await self._handle_dice(update, context)
            elif text == 'üó∫ –ì–µ–æ–∫–æ–¥–µ—Ä':
                await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /geocode <–º–µ—Å—Ç–æ>")
            elif text == '‚ùì –í–∏–∫—Ç–æ—Ä–∏–Ω–∞':
                await self._start_quiz(update, context)
            elif text == 'üåç –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫':
                await self._handle_translate(update, context)
            else:
                await update.message.reply_text(f"–í—ã —Å–∫–∞–∑–∞–ª–∏: {text}")

    async def _handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—É–±–∏–∫–æ–≤
        if query.data.startswith("dice_"):
            dice_type = query.data.split("_")[1]
            if dice_type == "1d6":
                result = random.randint(1, 6)
            elif dice_type == "2d6":
                result = f"{random.randint(1, 6)} –∏ {random.randint(1, 6)}"
            elif dice_type == "1d20":
                result = random.randint(1, 20)

            await query.edit_message_text(text=f"üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
        elif query.data.startswith("translate_"):
            direction = query.data.split("_")[1]
            self.translation_directions[user_id] = direction
            await query.edit_message_text(
                text=f"–í—ã–±—Ä–∞–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞"
            )

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            if os.name == 'nt':
                asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
            self.application.run_polling()
        except KeyboardInterrupt:
            print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        finally:
            if self.application.running:
                self.application.stop()


def main():
    bot = TelegramBot()
    bot.run()


if __name__ == '__main__':
    main()